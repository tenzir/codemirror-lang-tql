// Note: This is rather incomplete and on a best-effort basis. Also, writing
// such a grammar would be easier with lookahead, but this does not seem to be
// supported by lezer.

@top Root {
  (Operator (Pipe Operator)*)?
}
Operator { OperatorName arg* }
OperatorName { Word }
arg {
  Word |
  Path |
  Flag |
  String |
  Punct |
  Time |
  Number |
  Ip |
  Type |
  Meta | 
  Bool |
  Null |
  Parenthesis
}

@tokens {
  Word { $[a-zA-Z0-9-_/$:]+ }
  Path { "/" ((Word | ".")* "/")+ (Word | ".")+ }
  Identifier { $[a-zA-Z]$[a-zA-Z0-9]* }
  String {
    "\"" (!["] | "\\\"")* "\"" |
    "'" (!['] | "\\'")* "'" |
    "/" (![/] | "\\/")* "/"
  }
  Flag { "--" Word | "-" $[a-zA-Z0-9] whitespace }
  Punct { "==" | "||" | "&" | "=" | "!=" | "<" | "<=" | ">" | ">=" | "in" | "not" | "+" | "-" | "*" | "/" | "." | "%" | "," }
  Parenthesis { $[()[\]{}] }
  Type { ":" ($[a-zA-Z_]+ | @eof) }
  Meta { "#" $[a-zA-Z_]+ }
  Number { Integer | Float | Count }
  Count { Integer @whitespace* ("Ki" | "Mi" | "Gi" | "Ti" | "Pi" | "Ei") }
  Integer { ("-" | "+")? $[0-9]+ }
  Float { ("-" | "+")? @digit+ "." @digit* }
  Bool { "true" | "false" }
  Null { "null" }
  Ip {
    @digit+ "." @digit+ "." @digit+ "." @digit+ ("/" @digit*)? |
    $[0-9a-fA-F]* "::" ($[0-9a-fA-F]+ ("::" | "."))* $[0-9a-fA-F]+
  }
  Pipe { "|" }
  Time {
    "now" |
    "@" (Integer | Float) |
    $[1-2]$[0-9]$[0-9]$[0-9] "-"
      $[0-1]?$[0-9] (
        "-" Integer (
          ("+" | "T" | " ")
          (Integer (":" Integer)*)?
        )?
      )? |
    (Integer | Float) @whitespace* TimeUnit (@whitespace+ "ago")? |
    "in" @whitespace+ (Integer | Float) @whitespace* TimeUnit
  }
  TimeUnit {
    "nanoseconds" | "nanosecond" | "nsecs" | "nsec" | "ns" | "microseconds" | "microsecond" | "usecs" | "usec" | "us" | "milliseconds" | "millisecond" | "msecs" | "msec" | "ms" | "seconds" | "second" | "secs" | "sec" | "s" | "minutes" | "minute" | "mins" | "min" | "m" | "hours" | "hour" | "hrs" | "h" | "days" | "day" | "d" | "weeks" | "week" | "w" | "years" | "year" | "y"
  }

  whitespace { @whitespace }
  LineComment { ("//" | "# " | "#!" ) ![\n]* }

  @precedence { "/*", LineComment, Time, Type, Ip, Number, Path, String, Flag, Punct, Null, Bool, Identifier, Word }
}

@skip { whitespace | BlockComment | LineComment }

@skip {} {
  BlockComment { "/*" (blockCommentContent | blockCommentNewline)* blockCommentEnd }
}

@local tokens {
  blockCommentEnd { "*/" }
  blockCommentNewline { "\n" }
  @else blockCommentContent
}

@detectDelim
