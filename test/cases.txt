# Simple

foo
==>
Pipeline(OpStmt(OpName(Ident),Soup))


# Simple and 1 argument

foo bar
==>
Pipeline(OpStmt(OpName(Ident),Soup(Ident)))


# Simple and 2 arguments

foo bar, baz
==>
Pipeline(OpStmt(OpName(Ident),Soup(Ident,",",Ident)))


# Operator Pipe

foo bar | foo baz
==>
Pipeline(OpStmt(OpName(Ident),Soup(Ident)),Pipe,OpStmt(OpName(Ident),Soup(Ident)))


# Operator Newline

foo bar
foo baz
==>
Pipeline(OpStmt(OpName(Ident),Soup(Ident)),OpStmt(OpName(Ident),Soup(Ident)))


# Simple assignment
foo = bar
==>
Pipeline(AssignStmt(UnExpr(Ident),"=",Soup(Ident)))


# Newline in expression
foo (
  bar)
==>
Pipeline(OpStmt(OpName(Ident),Soup("(",Ident,")")))


# Newline in expression then operator
foo (
  bar)
baz
==>
Pipeline(OpStmt(OpName(Ident),Soup("(",Ident,")")),OpStmt(OpName(Ident),Soup))


# Let Definition
let $foo = 42s
==>
Pipeline(let,Soup(DollarIdent,"=",Scalar))


# Newline after comma
foo bar,
  baz,
  qux
==>
Pipeline(OpStmt(OpName(Ident),Soup(Ident,",",Ident,",",Ident)))


# Nested pipeline
foo bar=baz {
  qux
}
==>
Pipeline(OpStmt(OpName(Ident),Soup(Ident,"=",Ident,PipeExpr("{",OpStmt(OpName(Ident),Soup),"}"))))


# Record with no fields
foo {}
==>
Pipeline(OpStmt(OpName(Ident),Soup(EmptyRecord("{","}"))))


# Record with one field
foo { foo: bar }
==>
Pipeline(OpStmt(OpName(Ident),Soup(RecordStart("{",Ident,":"),RecordRest(Ident,"}"))))


# Record with two fields
foo { foo: bar,baz:qux}
==>
Pipeline(OpStmt(OpName(Ident),Soup(RecordStart("{",Ident,":"),RecordRest(Ident,",",Ident,":",Ident,"}"))))


# Backslash
test \
  foo=42
==>
Pipeline(OpStmt(OpName(Ident),Soup(Ident,"=",Scalar)))


# Nested pipeline
every 1s {
  pipeline::list
  select foo
}
deduplicate foo
==>
Pipeline(OpStmt(OpName(Ident),Soup(Scalar,PipeExpr("{",OpStmt(OpName(Ident),Soup(Ident)),OpStmt(OpName(Ident),Soup(Ident)),"}"))),OpStmt(OpName(Ident),Soup(Ident)))


# Raw string literals
foo r"", r"\", r#""#, r#"""#, r#"foo"#
==>
Pipeline(OpStmt(OpName(Ident),Soup(String,",",String,",",String,",",String,",",String)))


# Move operator
move foo=bar
==>
Pipeline(OpStmt(OpName(move),Soup(Ident,"=",Ident)))


# Move expression
foo = move bar
==>
Pipeline(AssignStmt(UnExpr(Ident),"=",Soup(move,Ident)))
