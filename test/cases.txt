# Simple

foo
==>
Pipeline(OpStmt(OpName(Ident),Soup))


# Simple and 1 argument

foo bar
==>
Pipeline(OpStmt(OpName(Ident),Soup(Ident)))


# Simple and 2 arguments

foo bar, baz
==>
Pipeline(OpStmt(OpName(Ident),Soup(Ident,Punct(","),Ident)))



# Operator Pipe

foo bar | foo baz
==>
Pipeline(OpStmt(OpName(Ident),Soup(Ident)),Pipe,OpStmt(OpName(Ident),Soup(Ident)))


# Operator Newline

foo bar
foo baz
==>
Pipeline(OpStmt(OpName(Ident),Soup(Ident)),OpStmt(OpName(Ident),Soup(Ident)))


# Simple assignment
foo = bar
==>
Pipeline(AssignStmt(UnExpr(Ident),"=",Soup(Ident)))


# Newline in expression
foo (
  bar)
==>
Pipeline(OpStmt(OpName(Ident),Soup("(",Ident,")")))


# Newline in expression then operator
foo (
  bar)
baz
==>
Pipeline(OpStmt(OpName(Ident),Soup("(",Ident,")")),OpStmt(OpName(Ident),Soup))


# Let Definition
let $foo = 42s
==>
Pipeline(LetStmt(Let,DollarIdent,"=",Soup(Scalar)))


# Newline after comma
foo bar,
  baz,
  qux
==>
Pipeline(OpStmt(OpName(Ident),Soup(Ident,Punct(","),Ident,Punct(","),Ident)))


# Nested pipeline
foo bar=baz {
  qux
}
==>
Pipeline(OpStmt(OpName(Ident),Soup(Ident,Punct("="),Ident,PipeExpr(OpStmt(OpName(Ident),Soup)))))


# Record with no fields
foo {}
==>
Pipeline(OpStmt(OpName(Ident),Soup(RecordExpr("{","}"))))


# Record with one field
foo { foo: bar }
==>
Pipeline(OpStmt(OpName(Ident),Soup(RecordExpr("{",Ident,Soup(Ident),"}"))))


# Record with two fields
foo { foo: bar,baz:qux}
==>
Pipeline(OpStmt(OpName(Ident),Soup(RecordExpr("{",Ident,Soup(Ident,Punct(","),Ident,Punct,Ident),"}"))))


# Backslash
test \
  foo=42
==>
